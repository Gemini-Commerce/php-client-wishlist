<?php
/**
 * WishlistSharingResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Wishlist Service
 *
 * API for managing wishlists
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WishlistSharingResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WishlistSharingResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static $withAdditionalProperties = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'wishlistSharingResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sharing_id' => 'string',
        'sharing_grn' => 'string',
        'wishlist_id' => 'string',
        'permission' => '\OpenAPI\Client\Model\WishlistPermission',
        'customer_grn' => 'string',
        'customer_aggregation_id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sharing_id' => null,
        'sharing_grn' => null,
        'wishlist_id' => null,
        'permission' => null,
        'customer_grn' => null,
        'customer_aggregation_id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sharing_id' => false,
        'sharing_grn' => false,
        'wishlist_id' => false,
        'permission' => false,
        'customer_grn' => false,
        'customer_aggregation_id' => false,
        'created_at' => false,
        'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sharing_id' => 'sharingId',
        'sharing_grn' => 'sharingGrn',
        'wishlist_id' => 'wishlistId',
        'permission' => 'permission',
        'customer_grn' => 'customerGrn',
        'customer_aggregation_id' => 'customerAggregationId',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sharing_id' => 'setSharingId',
        'sharing_grn' => 'setSharingGrn',
        'wishlist_id' => 'setWishlistId',
        'permission' => 'setPermission',
        'customer_grn' => 'setCustomerGrn',
        'customer_aggregation_id' => 'setCustomerAggregationId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sharing_id' => 'getSharingId',
        'sharing_grn' => 'getSharingGrn',
        'wishlist_id' => 'getWishlistId',
        'permission' => 'getPermission',
        'customer_grn' => 'getCustomerGrn',
        'customer_aggregation_id' => 'getCustomerAggregationId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Associative array for storing additional properties
     *
     * @var mixed[]
     */
    protected $additionalProperties = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sharing_id', $data ?? [], null);
        $this->setIfExists('sharing_grn', $data ?? [], null);
        $this->setIfExists('wishlist_id', $data ?? [], null);
        $this->setIfExists('permission', $data ?? [], null);
        $this->setIfExists('customer_grn', $data ?? [], null);
        $this->setIfExists('customer_aggregation_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sharing_id
     *
     * @return string|null
     */
    public function getSharingId()
    {
        return $this->container['sharing_id'];
    }

    /**
     * Sets sharing_id
     *
     * @param string|null $sharing_id sharing_id
     *
     * @return self
     */
    public function setSharingId($sharing_id)
    {
        if (is_null($sharing_id)) {
            throw new \InvalidArgumentException('non-nullable sharing_id cannot be null');
        }
        $this->container['sharing_id'] = $sharing_id;

        return $this;
    }

    /**
     * Gets sharing_grn
     *
     * @return string|null
     */
    public function getSharingGrn()
    {
        return $this->container['sharing_grn'];
    }

    /**
     * Sets sharing_grn
     *
     * @param string|null $sharing_grn sharing_grn
     *
     * @return self
     */
    public function setSharingGrn($sharing_grn)
    {
        if (is_null($sharing_grn)) {
            throw new \InvalidArgumentException('non-nullable sharing_grn cannot be null');
        }
        $this->container['sharing_grn'] = $sharing_grn;

        return $this;
    }

    /**
     * Gets wishlist_id
     *
     * @return string|null
     */
    public function getWishlistId()
    {
        return $this->container['wishlist_id'];
    }

    /**
     * Sets wishlist_id
     *
     * @param string|null $wishlist_id wishlist_id
     *
     * @return self
     */
    public function setWishlistId($wishlist_id)
    {
        if (is_null($wishlist_id)) {
            throw new \InvalidArgumentException('non-nullable wishlist_id cannot be null');
        }
        $this->container['wishlist_id'] = $wishlist_id;

        return $this;
    }

    /**
     * Gets permission
     *
     * @return \OpenAPI\Client\Model\WishlistPermission|null
     */
    public function getPermission()
    {
        return $this->container['permission'];
    }

    /**
     * Sets permission
     *
     * @param \OpenAPI\Client\Model\WishlistPermission|null $permission permission
     *
     * @return self
     */
    public function setPermission($permission)
    {
        if (is_null($permission)) {
            throw new \InvalidArgumentException('non-nullable permission cannot be null');
        }
        $this->container['permission'] = $permission;

        return $this;
    }

    /**
     * Gets customer_grn
     *
     * @return string|null
     */
    public function getCustomerGrn()
    {
        return $this->container['customer_grn'];
    }

    /**
     * Sets customer_grn
     *
     * @param string|null $customer_grn customer_grn
     *
     * @return self
     */
    public function setCustomerGrn($customer_grn)
    {
        if (is_null($customer_grn)) {
            throw new \InvalidArgumentException('non-nullable customer_grn cannot be null');
        }
        $this->container['customer_grn'] = $customer_grn;

        return $this;
    }

    /**
     * Gets customer_aggregation_id
     *
     * @return string|null
     */
    public function getCustomerAggregationId()
    {
        return $this->container['customer_aggregation_id'];
    }

    /**
     * Sets customer_aggregation_id
     *
     * @param string|null $customer_aggregation_id customer_aggregation_id
     *
     * @return self
     */
    public function setCustomerAggregationId($customer_aggregation_id)
    {
        if (is_null($customer_aggregation_id)) {
            throw new \InvalidArgumentException('non-nullable customer_aggregation_id cannot be null');
        }
        $this->container['customer_aggregation_id'] = $customer_aggregation_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    public static function withAdditionalProperties(): bool
    {
        return self::$withAdditionalProperties;
    }


    public function setAdditionalProperty($name, $value)
    {
        throw new \InvalidArgumentException(
            sprintf(
                "This model cannot have additional properties"
            )
        );
    }

    public function getAdditionalProperty($name)
    {
        return $this->additionalProperties[$name];
    }

    public function hasAdditionalProperty($name): bool
    {
        return array_key_exists($name, $this->additionalProperties);
    }

    public function getAdditionalProperties()
    {
        return $this->additionalProperties;
    }
}


